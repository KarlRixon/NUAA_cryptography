// AES-128
#include<stdlib.h>
#include<stdio.h>
#include<string.h>

typedef unsigned char byte;

const int length=28;
const byte sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
const byte rsbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d};

// 01 02 04 08 10 20 40 80 1b 36 6c ...
byte multx(byte x){     // x*2
    byte y=x;
    y=y<<1;
    byte m[]={0, 0x1b};
    y^=m[x>>7];
    return y;
}

// slow multiplication in GF(2^8)
byte mult(byte x, byte y)
{
    int i;
    byte z = 0;
    byte a = 128;
    for (i = 7; i >= 0; i--)
    {
        z = multx(z);
        if ((y & a) != 0)
            z ^= x;
        a = a >> 1;
    }
    return z;
}

void setRcon(byte rcon[10]){
    byte x=1;
    for(int i=0; i<10; i++){
        rcon[i]=x;
        x=multx(x);
    }
}

byte subByte(byte x){
    return sbox[x];
}

void keyExpansion(byte *key, byte *w){
    byte temp[4]={0};
    byte rcon[10];
    setRcon(rcon);
    
    for(int i=0; i<16; i++){
        w[i]=key[i];
    }
    for(int i=16; i<length*16; i+=4){
        for(int j=0; j<4; j++){
            temp[j]=w[i-4+j];
        }
        if((i%16)==0){
            temp[0]=subByte(w[i-3])^rcon[i/16-1];
            temp[1]=subByte(w[i-2]);
            temp[2]=subByte(w[i-1]);
            temp[3]=subByte(w[i-4]);
        }
        for(int j=0; j<4; j++){
            w[i+j]=w[i+j-16]^temp[j];
        }
    }
}

void addRoundKey(byte *state, byte *w, int round){
    for(int i=0; i<16; i++){
        state[i]^=w[16*round+i];
    }
}

void subBytes(byte *state){
    for(int i=0; i<16; i++){
        state[i]=subByte(state[i]);
    }
}

void shiftRows(byte *state){
    byte temp;

    temp=state[1];
    state[1]=state[5];
    state[5]=state[9];
    state[9]=state[13];
    state[13]=temp;

    temp=state[2];
    state[2]=state[10];
    state[10]=temp;
    temp=state[6];
    state[6]=state[14];
    state[12]=temp;

    temp=state[3];
    state[3]=state[15];
    state[15]=state[11];
    state[11]=state[7];
    state[7]=temp;
}

/*|02 03 01 01|
  |01 02 03 01|
  |01 01 02 03|
  |03 01 01 02|*/
void mixColumns(byte *state){
    byte ns[16];
    for(int j=0; j<4; j++){
        ns[j * 4] = multx(state[j * 4]) ^ multx(state[j * 4 + 1]) ^ state[j * 4 + 1] ^ state[j * 4 + 2] ^ state[j * 4 + 3];
        ns[j * 4 + 1] = state[j * 4] ^ multx(state[j * 4 + 1]) ^ multx(state[j * 4 + 2]) ^ state[j * 4 + 2] ^ state[j * 4 + 3];
        ns[j * 4 + 2] = state[j * 4] ^ state[j * 4 + 1] ^ multx(state[j * 4 + 2]) ^ multx(state[j * 4 + 3]) ^ state[j * 4 + 3];
        ns[j * 4 + 3] = multx(state[j * 4]) ^ state[j * 4] ^ state[j * 4 + 1] ^ state[j * 4 + 2] ^ multx(state[j * 4 + 3]);
    }
    for (int j = 0; j < 4; j++)
        for (int i = 0; i < 4; i++)
            state[j * 4 + i] = ns[j * 4 + i];
}

// decrypt functions
byte inverse(byte x){       // 求逆
  int i;
  byte y=0;
  if(x==0) return 0;
  for(i=0;i<255;i++)
  {
    y++;
    if(mult(x,y)==1) return y;
  }
  return y;
}

byte rsubByte(byte x){
    return rsbox[x];
}

void rsubBytes(byte *state){
    for(int i=0; i<16; i++){
        state[i]=rsubByte(state[i]);
    }
}

void rshiftRows(byte *state){
    byte temp;

    temp=state[1];
    state[1]=state[13];
    state[13]=state[9];
    state[9]=state[5];
    state[5]=temp;

    temp=state[2];
    state[2]=state[10];
    state[10]=temp;
    temp=state[6];
    state[6]=state[14];
    state[12]=temp;

    temp=state[3];
    state[3]=state[7];
    state[7]=state[11];
    state[11]=state[15];
    state[15]=temp;
}

void rmixColumns(byte *state){
    byte ns[16];
    for(int j=0; j<4; j++){
        ns[j * 4] = mult(state[j * 4], 0x0e) ^ mult(state[j * 4 + 1], 0x0b) ^ mult(state[j * 4 + 2], 0x0d) ^ mult(state[j * 4 + 3], 0x09);
        ns[j * 4 + 1] = mult(state[j * 4], 0x09) ^ mult(state[j * 4 + 1], 0x0e) ^ mult(state[j * 4 + 2], 0x0b) ^ mult(state[j * 4 + 3], 0x0d);
        ns[j * 4 + 2] = mult(state[j * 4], 0x0d) ^ mult(state[j * 4 + 1], 0x09) ^ mult(state[j * 4 + 2], 0x0e) ^ mult(state[j * 4 + 3], 0x0b);
        ns[j * 4 + 3] = mult(state[j * 4], 0x0b) ^ mult(state[j * 4 + 1], 0x0d) ^ mult(state[j * 4 + 2], 0x09) ^ mult(state[j * 4 + 3], 0x0e);
    }
    for (int j = 0; j < 4; j++)
        for (int i = 0; i < 4; i++)
            state[j * 4 + i] = ns[j * 4 + i];
}

// 另一种乘法算法
static byte xtime(byte x)       // multx
{
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
}
byte Multiply(byte x, byte y)   // mult
{
    return (((y & 1) * x) ^
            ((y >> 1 & 1) * xtime(x)) ^
            ((y >> 2 & 1) * xtime(xtime(x))) ^
            ((y >> 3 & 1) * xtime(xtime(xtime(x)))) ^
            ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x))))));
}

// Pretty-print a key (or any smallish buffer) onto screen as hex
static void Pretty(const byte* b,int len,char* label) {
    printf("%s", label);
    int i;
    for (i=0; i<len; i++) {
        printf("%02x", b[i]);
    }
    printf("\n");
}

// test vector from Appendix A.1 of FIPS 197
byte keyt[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
byte expected_keys[176] = {
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c,
    0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c, 0x76, 0x05,
    0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59, 0xf6, 0x7f,
    0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a, 0x88, 0x3b,
    0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b, 0xad, 0x00,
    0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9, 0x15, 0xbc,
    0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00, 0x93, 0xfd,
    0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6, 0xdc, 0x4f,
    0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d, 0x29, 0x2f,
    0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c, 0x00, 0x6e,
    0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63, 0x0c, 0xa6};
byte keys[176];
int test_expand_key_128() {
    printf("\nTest AES128 key expansion\n");
    keyExpansion(keyt, keys);
    if (memcmp(keys, expected_keys, 176) == 0) {
        printf("Expanded key matches expected value.\n");
        return 0;
    } else {
        printf("Expanded key does not match expected value!\n");
        Pretty(expected_keys, 176, "Expected expanded key: ");
        Pretty(keys, 176, "Actual expanded key:   ");
        return -1;
    }
}
byte m[length * 16] = {0};
byte c[length * 16] = {0};
byte d[length * 16] = {0};
byte state[16] = {0};
byte key[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
byte w[176] = {0};
int main(){
    test_expand_key_128();

    FILE *fp;
    if ((fp = fopen("message.txt", "r")) == NULL)
    {
        printf("Cannot open the file,strike any key to exit!\n");
        getchar();
        exit(0);
    }
    printf("\n\n-------------------------message---------------------------\n\n");
    for (int i = 0; i < length*16; i++)
    {
        m[i]=fgetc(fp);
        printf("%c", m[i]);
    }
    fclose(fp);
    printf("\n\n-------------------------cipher---------------------------\n\n");
    keyExpansion(key, w);
    for(int i=0; i<length; i++){
        for(int j=0; j<16; j++){
            state[j]=m[i*16+j];
        }
        addRoundKey(state, w, 0);
        for (int j = 0; j < 9; j++)
        {
            subBytes(state);
            shiftRows(state);
            mixColumns(state);
            addRoundKey(state, w, j + 1);
        }
        subBytes(state);
        shiftRows(state);
        addRoundKey(state, w, 10);
        for(int j=0; j<16; j++){
            c[i*16+j]=state[j];
        }
    }
    for (int i = 0; i < length*16; i++)
    {
        printf("%02x", c[i]);
    }
    printf("\n\n-------------------------decrypt---------------------------\n\n");
    keyExpansion(key, w);
    for(int i=0; i<length; i++){
        for(int j=0; j<16; j++){
            state[j]=c[i*16+j];
        }
        addRoundKey(state, w, 10);
        rshiftRows(state);
        rsubBytes(state);
        for (int i = 9; i > 0; i--)
        {
            addRoundKey(state, w, i);
            rmixColumns(state);
            rshiftRows(state);
            rsubBytes(state);
        }
        addRoundKey(state, w, 0);
        for(int j=0; j<16; j++){
            d[i*16+j]=state[j];
        }
    }
    for (int i = 0; i < length*16; i++)
    {
        printf("%c", m[i]);
    }
    // 将密文写到文件
    if ((fp = fopen("cipher.txt", "w")) == NULL)
    {
        printf("Cannot open the file,strike any key to exit!\n");
        getchar();
        exit(0);
    }
    for (int i = 0; i < length*16; i++)
    {
        //fputc(c[i], fp);
        fprintf(fp, "%02x", c[i]);
    }
    fclose(fp);
    // 检查解密正确性
    // for(int i=0; i<length*16; i++){
    //     if(m[i]!=d[i]){
    //         printf("第%d个字母解密出错\n", i+1);
    //         exit(0);
    //     }
    // }
}